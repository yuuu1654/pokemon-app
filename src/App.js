
import "./App.css";
import { useEffect, useState } from "react"
import { getAllPokemons, getPokemon } from "./utils/pokemon";
import { Card } from "./components/Card/Card";
import Navbar from "./components/Navbar/Navbar";

function App() {
  const initialURL = "https://pokeapi.co/api/v2/pokemon"
  const [loading, setLoading] = useState(true)
  const [pokemonData, setPokemonData] = useState([])
  const [nextURL, setNextURL] =  useState("")
  const [prevURL, setPrevURL] = useState("")

  /**
   * ÂÖ®„Å¶„ÅÆ„Éù„Ç±„É¢„É≥„Éá„Éº„Çø (20‰ª∂Âà∂Á¥Ñ) „ÇíÂèñÂæó
   */
  const fetchAllPokemons = async () => {
    try {
      const res = await getAllPokemons(initialURL)
      console.log(res.results)
      setNextURL(res.next)
      loadPokemon(res.results)
      setLoading(false)
    } catch (error) {
      console.error(error)
    }
  }

  /**
   * fetchAllPokemonÂÜÖ„Åß„ÄÅres.results(name, pokemonË©≥Á¥∞urlÈÖçÂàó„ÅÆ„Ç™„Éñ„Ç∏„Çß„ÇØt)„Åã„Çâurl„ÇíÊäú„ÅçÂá∫„Åô
   * Êäú„ÅçÂá∫„Åó„Åüurl„Åß „Éù„Ç±„É¢„É≥Ë©≥Á¥∞„Éá„Éº„Çø „ÇíÂèñÂæó„Åó„Å¶„ÄÅ„Çπ„ÉÜ„Éº„Éà„Å´‰øùÂ≠ò
   */
  const loadPokemon = async (data) => {
    let _pokemonData = await Promise.all(
      data.map((pokemon) => {        
        let pokemonRecord = getPokemon(pokemon.url)
        return pokemonRecord;
      })
    )
    setPokemonData(_pokemonData)
  }

  useEffect(() => {
    fetchAllPokemons()
    console.log(nextURL)
    console.log(prevURL)
  }, [])

  const handlePrevPage = async () => {
    /**
     * „ÇØ„É™„ÉÉ„ÇØ„Åó„Åü„ÇâÂâç„ÅÆ20Á®ÆÈ°û„ÅÆ„Éù„Ç±„É¢„É≥„ÇíÂèñÂæó„Åó„Å¶Ë°®Á§∫„Åï„Åõ„Çã
     * Ê¨°„Å´ÈÅ∑Áßª„Åô„Çã„Åü„ÇÅ„ÅÆurl: getAllPokemons(initialURL)„ÅÆÊàª„ÇäÂÄ§„ÄÄdata.next„ÄÄ„Å´„ÅÇ„Çã
     * ‚ùåprevious„Åånull„Å™„ÇâinitialURL„ÇíÂÖ•„Çå„Çã
     * üôÜ prevURL„Åånull„Å™„Çâ„ÄÅ‰Ωï„ÇÇ„Åõ„Åö„Å´return„ÅßËøîÂç¥
     */
    try {
      if (!prevURL) return;
      setLoading(true)
      let data = await getAllPokemons(prevURL)
      setNextURL(data.next)
      setPrevURL(data.previous)
      loadPokemon(data.results)
      setLoading(false)
    } catch (error) {
      console.error(error)
    }
  }

  const handleNextPage = async () => {
    try {
      setLoading(true)
      let data = await getAllPokemons(nextURL)
      setNextURL(data.next)
      setPrevURL(data.previous)
      loadPokemon(data.results)
      setLoading(false)
    } catch (error) {
      console.error(error)
    }
  }
  return (
    <div className="App">
      <Navbar />
      {loading ? (
        <p>„É≠„Éº„Éâ‰∏≠...</p>
      ) : (
        <>
          <div className="btn">
            <button className="" onClick={handlePrevPage}>Ââç„Å∏</button>
            <button className="" onClick={handleNextPage}>Ê¨°„Å∏</button>
          </div>
          <div className="pokemonCardContainer">
            {pokemonData.map((pokemon, i) => (
              <Card key={i} pokemon={pokemon} />
            ))}
          </div>
        </>
      )}
    </div>
  )
}
export default App;